// Generated by CoffeeScript 1.7.1
(function() {
  var Person, dateToString, handleData, http, padNumber,
    __hasProp = {}.hasOwnProperty;

  Person = require('./person');

  http = require('http');

  handleData = function(data, cb) {
    var key, list, value;
    if ('object' !== typeof data) {
      return typeof cb === "function" ? cb(new Error('Invalid response type')) : void 0;
    }
    list = [];
    for (key in data) {
      if (!__hasProp.call(data, key)) continue;
      value = data[key];
      list.push(new Person(key, value));
    }
    return typeof cb === "function" ? cb(null, list) : void 0;
  };

  padNumber = function(number) {
    if (number < 10) {
      return '0' + number;
    }
    return number + '';
  };

  dateToString = function(date) {
    var goodDate, parts;
    goodDate = new Date(date.valueOf() - 60 * 1000 * 60 * 5);
    parts = [goodDate.getUTCFullYear(), padNumber(goodDate.getUTCMonth() + 1), padNumber(goodDate.getUTCDate())];
    return parts.join('/');
  };

  module.exports = function(_date, _cb) {
    var cb, date, dateStr, req, theUrl;
    if ('function' === typeof _date) {
      date = new Date();
      cb = _date;
    } else {
      date = _date;
      cb = _cb;
    }
    dateStr = dateToString(date);
    theUrl = "http://www.bloomberg.com/billionaires/db/stats/" + dateStr;
    req = http.get(theUrl, function(res) {
      var buffer;
      buffer = new Buffer('');
      res.on('data', function(d) {
        return buffer = Buffer.concat([buffer, d]);
      });
      return res.on('end', function() {
        var data, e;
        try {
          data = JSON.parse(buffer);
        } catch (_error) {
          e = _error;
          return typeof cb === "function" ? cb(e) : void 0;
        }
        return handleData(data, cb);
      });
    });
    return req.on('error', function(err) {
      return typeof cb === "function" ? cb(err) : void 0;
    });
  };

}).call(this);
